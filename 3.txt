import sqlite3

class UniversityDB:
    def __init__(self, db_name):
        self.db_name = db_name

    def execute_query(self, query, params=None, fetch=False):
       
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                if params:
                    cursor.execute(query, params)
                else:
                    cursor.execute(query)
                conn.commit()
                if fetch:
                    return cursor.fetchall()
        except sqlite3.Error as error:
            print("Ошибка при выполнении запроса:", error)
            return None

    def initialize_db(self):
       
        self.execute_query('''
        CREATE TABLE IF NOT EXISTS Students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            surname TEXT NOT NULL,
            age INTEGER NOT NULL,
            city TEXT NOT NULL
        );''')

        self.execute_query('''
        CREATE TABLE IF NOT EXISTS Courses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            time_start TEXT NOT NULL,
            time_end TEXT NOT NULL
        );''')

        self.execute_query('''
        CREATE TABLE IF NOT EXISTS Student_courses (
            student_id INTEGER NOT NULL,
            course_id INTEGER NOT NULL,
            FOREIGN KEY (student_id) REFERENCES Students (id),
            FOREIGN KEY (course_id) REFERENCES Courses (id)
        );''')

    def populate_data(self):
        
        student_exists = self.execute_query("SELECT 1 FROM Students LIMIT 1;", fetch=True)
        if student_exists:
            print("База данных уже заполнена")
            return

        courses_data = [
            (1, 'python', '21.07.21', '21.08.21'),
            (2, 'java', '13.07.21', '16.08.21')
        ]
        self.execute_query("INSERT OR IGNORE INTO Courses (id, name, time_start, time_end) VALUES (?, ?, ?, ?);", courses_data)

        students_data = [
            (1, 'Max', 'Brooks', 24, 'Spb'),
            (2, 'John', 'Stones', 15, 'Spb'),
            (3, 'Andy', 'Wings', 45, 'Manhester'),
            (4, 'Kate', 'Brooks', 34, 'Spb')
        ]
        self.execute_query("INSERT OR IGNORE INTO Students (id, name, surname, age, city) VALUES (?, ?, ?, ?, ?);", students_data)

        student_courses_data = [
            (1, 1),
            (2, 1),
            (3, 1),
            (4, 2)
        ]
        self.execute_query("INSERT OR IGNORE INTO Student_courses (student_id, course_id) VALUES (?, ?);", student_courses_data)

        print("Данные успешно добавлены")

    def get_students_over_30(self):
       
        query = "SELECT * FROM Students WHERE age > 30;"
        return self.execute_query(query, fetch=True)

    def get_students_in_course(self, course_name):
       
        query = '''
        SELECT Students.* 
        FROM Students
        JOIN Student_courses ON Students.id = Student_courses.student_id
        JOIN Courses ON Student_courses.course_id = Courses.id
        WHERE Courses.name = ?;
        '''
        return self.execute_query(query, params=(course_name,), fetch=True)

    def get_students_in_course_and_city(self, course_name, city):
      
        query = '''
        SELECT Students.* 
        FROM Students
        JOIN Student_courses ON Students.id = Student_courses.student_id
        JOIN Courses ON Student_courses.course_id = Courses.id
        WHERE Courses.name = ? AND Students.city = ?;
        '''
        return self.execute_query(query, params=(course_name, city), fetch=True)


	
	# тесты
if __name__ == "__main__":
    db = UniversityDB("university.db")
    db.initialize_db()
    db.populate_data()

    #1 студенты старше 30
    students_over_30 = db.get_students_over_30()
    print("Студенты старше 30 лет:", students_over_30)

    #2 Студенты на курсе Питона
    python_students = db.get_students_in_course("python")
    print("Студенты, проходящие курс по python:", python_students)

    #3 На курсе питона и из СПБ
    python_spb_students = db.get_students_in_course_and_city("python", "Spb")
    print("Студенты из Spb, проходящие курс по python:", python_spb_students)
